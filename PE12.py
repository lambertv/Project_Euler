#PE12.py 
#solution written by Valerie Lambert

"""
PROJECT EULER PROBLEM 12

The sequence of triangle numbers is generated by adding the natural numbers.
So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28
The first ten terms would be:

    1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:
    1: 1
    3: 1, 3
    6: 1, 2, 3, 6
   10: 1, 2, 5, 10
   15: 1, 3, 5, 15
   21: 1, 3, 7, 21
   28: 1, 2, 4, 7, 14, 28

We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have 
over five hundred divisors?
"""
def numDivisors(n):
    count = 0
    for i in range(1, n):
	if n%i == 0:
	    count += 1
    return count

def minTriNum(max_num_divisors):
    tri_num = 1
    count = 1
    while numDivisors(tri_num) <= max_num_divisors:
	tri_num += count
	count += 1 
    return numDivisors(tri_num)

"""
My program currently takes forever to run, though I believe if I
had forever to wait it would probably get to the correct answer eventually.
Obviously, since I do not have forever, (It turns out a number with over
500 divisors is going to be very large) I need an implementation that isn't
O(2**n). It might be wiser to first find numbers that have over 500 divisors,
and then check if any of them happen to be triangular numbers; though,
I'm guessing I would run into similar problems. I have an inkling that I can
find a way to use numDivisors() recursively. I've spent the last hour in front
of a newspaper with a sharpie trying to remember how one would calculate
the number of divisors a number would have based on its prime factorization,
and hopefully some insight will be born of that.
"""

def main():
    number_of_divisors = 500
    print(minTriNum(number_of_divisors))

main()
