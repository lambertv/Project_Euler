#PE12.py 
#solution written by Valerie Lambert

"""
PROJECT EULER PROBLEM 12

The sequence of triangle numbers is generated by adding the natural numbers.
So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28
The first ten terms would be:

    1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:
    1: 1
    3: 1, 3
    6: 1, 2, 3, 6
   10: 1, 2, 5, 10
   15: 1, 3, 5, 15
   21: 1, 3, 7, 21
   28: 1, 2, 4, 7, 14, 28

We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have 
over five hundred divisors?
"""
import math

def numPrimeDivisors(n):
    for i in range(2, int(math.sqrt(n))+1):
        if n%i is 0 and n is not 2:
            return numPrimeDivisors(i) + numPrimeDivisors(n/i)
    return 1

def numDivisors(n):
    count = 0
    for i in range(1,int(math.sqrt(n))):
	if n%i == 0:
	    count += 1
    count *= 2
    if count%math.sqrt(n) == 0:
        count += 1
    return count

"""
With the above recursive definition for finding the number of terms in
a numbers prime factorization, I can quickly shift through the triangular
numbers and pick out ones that have a chance of being divisible by 500 terms.
However, it is still not fast enough, taking
"""
def minTriNum(approx, max_num, max_div):
    tri_num = 1
    count = 1
    while tri_num < max_num:
        prime_num = numPrimeDivisors(tri_num)
        if prime_num >= approx:
            num_div = numDivisors(tri_num)
            if num_div >= max_div:
                print("FOUND")
            print(str(tri_num) + ": " + str(numDivisors(tri_num)))
	tri_num += count
	count += 1 

def isTriNum(n):
    temp = n
    count = 1
    while temp > 0:
        temp -= count
        count += 1
        if temp == 0:
            return True
    return False

def main():
    print(isTriNum(55))
    print(isTriNum(111))
    print(numDivisors(28))
    print(numDivisors(100))
    print(numPrimeDivisors(100))
    print(numPrimeDivisors(256))
    print(numPrimeDivisors(346))
    minTriNum(15, 100000000000, 500)

main()
